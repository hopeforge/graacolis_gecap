// <auto-generated />
using System;
using BackEnd.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BackEnd.Migrations
{
    [DbContext(typeof(GRAACCDbContext))]
    [Migration("20191208043631_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BackEnd.Domain.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DesafioId");

                    b.Property<string>("ImgURL");

                    b.Property<string>("Token");

                    b.Property<int?>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("DesafioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("BackEnd.Domain.Desafio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataFinal");

                    b.Property<DateTime>("DataInicio");

                    b.Property<string>("Descricao");

                    b.Property<int?>("EmpresaId");

                    b.Property<string>("Etapas");

                    b.Property<string>("NomeDesafio");

                    b.Property<int>("PremiacaoId");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("PremiacaoId")
                        .IsUnique();

                    b.ToTable("Desafio");
                });

            modelBuilder.Entity("BackEnd.Domain.DesafioUsuario", b =>
                {
                    b.Property<int>("DesafioId");

                    b.Property<int>("UsuarioId");

                    b.HasKey("DesafioId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("DesafioUsuario");
                });

            modelBuilder.Entity("BackEnd.Domain.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CNPJ");

                    b.Property<string>("NomeEmpresa");

                    b.Property<string>("NomeUsuario");

                    b.Property<string>("Senha");

                    b.HasKey("Id");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("BackEnd.Domain.Ganhador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DesafioId");

                    b.Property<string>("LinkedinUrl");

                    b.Property<string>("Nome");

                    b.Property<int?>("PremiacaoId");

                    b.Property<int?>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("DesafioId");

                    b.HasIndex("PremiacaoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Ganhador");
                });

            modelBuilder.Entity("BackEnd.Domain.Premiacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DesafioId");

                    b.Property<int>("QuantidadePremiados");

                    b.Property<string>("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Premiacao");
                });

            modelBuilder.Entity("BackEnd.Domain.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NomeUsuario");

                    b.Property<string>("Senha");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("BackEnd.Domain.Badge", b =>
                {
                    b.HasOne("BackEnd.Domain.Desafio", "Desafio")
                        .WithMany()
                        .HasForeignKey("DesafioId");

                    b.HasOne("BackEnd.Domain.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("BackEnd.Domain.Desafio", b =>
                {
                    b.HasOne("BackEnd.Domain.Empresa", "Empresa")
                        .WithMany("ListaDesafio")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BackEnd.Domain.Premiacao", "Premiacao")
                        .WithOne("Desafio")
                        .HasForeignKey("BackEnd.Domain.Desafio", "PremiacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BackEnd.Domain.DesafioUsuario", b =>
                {
                    b.HasOne("BackEnd.Domain.Desafio", "Desafio")
                        .WithMany("ListaParticipantes")
                        .HasForeignKey("DesafioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BackEnd.Domain.Usuario", "Usuario")
                        .WithMany("ListaDesafio")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BackEnd.Domain.Ganhador", b =>
                {
                    b.HasOne("BackEnd.Domain.Desafio", "Desafio")
                        .WithMany("ListaGanhadores")
                        .HasForeignKey("DesafioId");

                    b.HasOne("BackEnd.Domain.Premiacao", "Premiacao")
                        .WithMany("ListaGanhadores")
                        .HasForeignKey("PremiacaoId");

                    b.HasOne("BackEnd.Domain.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });
#pragma warning restore 612, 618
        }
    }
}
